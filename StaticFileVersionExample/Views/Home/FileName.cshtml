@{
    ViewBag.Title = "文件名形式的版本号";
    Layout = "~/Views/Shared/_PageLayout.cshtml";
    var index = 1;
}
@section Styles {
    <!--文件名形式版本号-->
    <link rel="stylesheet" href="/Public/@ViewBag.manifest["css/bootstrap.css"]">
    <link rel="stylesheet" href="/Public/@ViewBag.manifest["css/Site.css"]">
}
<h3>文件名形式的版本号</h3>
<p>点击<a href="javascript:;" onclick="location.href = 'view-source:'+location.href">查看源码</a>查看添加版本号效果</p>
<h4>@Html.Raw(index++)<text>.配置</text></h4>
<p>css/js/img放在/Content目录下，使用gulp脚本将/Content目录下的文件添加版本号复制到/Public目录下。生成的文件映射表存放于/Content/server-manifest.json文件中。</p>
<p>gulp安装步骤如下：</p>
<ul>
<li>安装nodejs</li>
<li>使用npm install gulp -g全局安装gulp</li>
<li>进到项目根目录，使用npm install安装包</li>
<li>执行gulp命令</li>
</ul>
<p>gulp脚本参见项目根目录gulpfile.js</p>
<h4>@Html.Raw(index++)<text>.页面中引用的文件添加版本号</text></h4>
<p>通过gulp-rev-all生成带版本号的文件名，并且通过服务端读取到ViewBag.manifest中。</p>
<pre>
string path = Server.MapPath("~/Content/server-manifest.json");
string content = System.IO.File.ReadAllText(path);
JObject manifest = JObject.Parse(content);
ViewBag.manifest = manifest;
ViewBag.manifestContent = content;
</pre>
<p>访问时传入原文件名作key。</p>
<pre>
&lt;link rel="stylesheet" href="/Public/@@ViewBag.manifest["css/bootstrap.css"]"&gt;
&lt;link rel="stylesheet" href="/Public/@@ViewBag.manifest["css/Site.css"]"&gt;
</pre>
<p>具体代码见Views/Home/FileName.cshtml文件。</p>
<h4>@Html.Raw(index++)<text>.js中获取版本号</text></h4>
<p>将server-manifest.json中的内容输出到js变量，js中加载js，css，image等文件时通过原文件名找到更名后的文件。</p>
<pre>
&lt;script&gt;
  var fileManifest = @@Html.Raw(ViewBag.manifestContent)
&lt;/script&gt;
</pre>
<h4>@Html.Raw(index++)<text>.css中引用的图片</text></h4>
<p>无须处理，gulp-rev-all会自动处理。</p>
<script>
fileManifest = @Html.Raw(ViewBag.manifestContent)
</script>
